source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

set-option global ui_options terminal_assistant=none terminal_padding_char=
set-option global scrolloff 5,3
set-option global autoreload yes
set-option global tabstop 4
set-option global indentwidth 4

add-highlighter global/ wrap -indent
add-highlighter global/ number-lines -relative -hlcursor
add-highlighter global/ show-matching

map global normal u u,
map global normal U U,

# Exit insert mode with `jk`.
hook global InsertChar k %{ try %{
  exec -draft hH <a-k>jk<ret> d
  exec <esc>
  write
}}

define-command cargo-lclippy %{
  evaluate-commands %sh{
    str=$(cargo lclippy --all-targets --message-format json |\
      jq -rcs '
        .[-1].message.spans
          | ..
          | select(.is_primary? == true)
          | [ .file_name, .line_start, .column_start ]
          | @sh
      '
    )
    declare -a args="($str)"

    if [[ ! $args ]]; then
      "echo No errors were found"
    else
      echo "e $(realpath ${args[0]}) ${args[1]} ${args[2]}"
    fi
  }
}

# Move in autocompletion with tab
hook global InsertCompletionShow .* %{
  try %{
    # this command temporarily removes cursors preceded by whitespace;
    # if there are no cursors left, it raises an error, does not
    # continue to execute the mapping commands, and the error is eaten
    # by the `try` command so no warning appears.
    execute-keys -draft "hGh<a-k>\w<ret>"
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
    hook -once -always window InsertCompletionHide .* %{
      unmap window insert <tab> <c-n>
      unmap window insert <s-tab> <c-p>
    }
  }
}

plug "andreyorst/smarttab.kak"
plug "occivink/kakoune-sudo-write"

hook global RegisterModified '"' %{
  nop %sh{
    gpaste-client add "$kak_selections"
  }
}

hook global WinCreate .*\.typ %{
  set-option window filetype typst
}

# Language specific configuration.
hook global WinSetOption filetype=(.*\.kak|kakrc|fish|kak|latex|typst) %{
  set-option global tabstop 2
  set-option window indentwidth 2
}

hook global BufCreate () %{
  set-option buffer tabstop 2
  set-option global indentwidth 2
}

# LSP stuff
plug "kakoune-lsp/kakoune-lsp" do %{
  cargo update
  cargo install --locked --force --path .  
} config %{
  remove-hooks global rust-highlight

  hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp) %{
    lsp-enable-window

    set-option global lsp_auto_highlight_references true
    set-option global lsp_hover_max_diagnostic_lines 8

    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens PromptIdle .* lsp-semantic-tokens

    map window user l %{: enter-user-mode lsp<ret>} -docstring "LSP mode"
    map global view h "<esc>: lsp-hover<ret>" -docstring "LSP hover"
    map global view e '<esc>: cargo-lclippy<ret>' -docstring "LSP priority error"

    add-highlighter -override window/ wrap -width 101 -indent

    evaluate-commands %sh{
      GIT_DISCOVERY_ACROSS_FILESYSTEM=true git check-ignore -q . 2>/dev/null
      if [ "$?" -eq "1" ]; then
        echo "change-directory $(git rev-parse --show-toplevel)"
      fi
    }
  }
}

plug "basbebe/modeline-extras.kak" config %{
  require-module modeline-extras

  # enable options
  modeline-git-branch-enable
  modeline-lsp-enable

  source "%val{config}/statusline.kak"
}

# Other files
source "%val{config}/colorscheme.kak"
